name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  GO_VERSION: '1.25'
  MIN_GO_VERSION: '1.21'

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.semver.outputs.version_tag }}
      version: ${{ steps.semver.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Semver
      uses: paulhatch/semantic-version@v5.4.0
      with:
        bump_each_commit: true
        tag_prefix: "v"
        format: "${major}.${minor}.${patch}"
        major_pattern: "BREAKING CHANGE:"
        minor_pattern: "feat:"
        version_from_branch: false
        change_path: "."
        namespace: ""
      id: semver

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: make deps

    - name: Run tests
      run: make test

    - name: Build
      run: make build

    - name: Lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        verify: false  # Disable schema validation for custom linters
        args: --timeout=30m --config=.golangci.local.yml

    - name: Lint Self
      run: make lint-self

  # Test Go version compatibility matrix
  compatibility-test:
    name: Go Version Compatibility Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-build-version: ['1.21', '1.22', '1.23', '1.24', '1.25']
        go-target-version: ['1.21', '1.22', '1.23', '1.24', '1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-build-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-build-version }}

    - name: Build namedreturns with Go ${{ matrix.go-build-version }}
      run: |
        go mod tidy
        go build -o namedreturns-${{ matrix.go-build-version }} .

    - name: Create test codebase with Go ${{ matrix.go-target-version }}
      run: |
        mkdir test-target-${{ matrix.go-target-version }}
        cd test-target-${{ matrix.go-target-version }}
        echo "module test" > go.mod
        echo "go ${{ matrix.go-target-version }}.0" >> go.mod
        cat << 'EOF' > main.go
        package main

        func example() (result string, err error) {
            return "test", nil
        }

        func badExample() (string, error) {
            return "bad", nil
        }
        EOF

    - name: Test compatibility (build=${{ matrix.go-build-version }}, target=${{ matrix.go-target-version }})
      run: |
        cd test-target-${{ matrix.go-target-version }}
        ../namedreturns-${{ matrix.go-build-version }} . || echo "Expected some violations"
        echo "âœ… namedreturns built with Go ${{ matrix.go-build-version }} can analyze Go ${{ matrix.go-target-version }} codebases"

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Tag Repo
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ needs.test.outputs.version_tag }}

    - name: Publish Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.test.outputs.version_tag }}
        name: ${{ needs.test.outputs.version_tag }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}